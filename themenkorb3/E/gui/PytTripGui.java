/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ue_08.gui;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import ue_08.calc.PytTripRechner;
import ue_08.data.PytTrip;

/**
 *
 * @author ruffe
 */
public class PytTripGui extends javax.swing.JFrame
{

  /**
   * Creates new form PytTripGui
   */
  public PytTripGui()
  {
    initComponents();
    listenfeld.setModel(new PytTripListModel(new ArrayList<>()));
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    pMain = new javax.swing.JPanel();
    pList = new javax.swing.JPanel();
    jScrollPane2 = new javax.swing.JScrollPane();
    listenfeld = new javax.swing.JList<>();
    pCenter = new javax.swing.JPanel();
    pEingabe = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    tfErgebnisse = new javax.swing.JFormattedTextField();
    tfDauer = new javax.swing.JFormattedTextField();
    jLabel4 = new javax.swing.JLabel();
    spObergrenze = new javax.swing.JSpinner();
    pButton = new javax.swing.JPanel();
    btBerechnen = new javax.swing.JButton();
    btLoeschen = new javax.swing.JButton();
    btBeenden = new javax.swing.JButton();
    pProgress = new javax.swing.JPanel();
    progressBar = new javax.swing.JProgressBar();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Pythagoräische Tripel v0.1");
    setLocationByPlatform(true);

    pMain.setLayout(new java.awt.BorderLayout());

    pList.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Liste", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP), javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8)));
    pList.setLayout(new java.awt.BorderLayout());

    listenfeld.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    jScrollPane2.setViewportView(listenfeld);

    pList.add(jScrollPane2, java.awt.BorderLayout.CENTER);

    pMain.add(pList, java.awt.BorderLayout.EAST);

    pCenter.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));
    pCenter.setLayout(new java.awt.BorderLayout());

    java.awt.GridBagLayout pEingabeLayout = new java.awt.GridBagLayout();
    pEingabeLayout.columnWidths = new int[] {0, 5, 0, 5, 0};
    pEingabeLayout.rowHeights = new int[] {0, 5, 0, 5, 0};
    pEingabe.setLayout(pEingabeLayout);

    jLabel1.setText("Obergrenze");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    pEingabe.add(jLabel1, gridBagConstraints);

    jLabel2.setText("Ergebnisse");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    pEingabe.add(jLabel2, gridBagConstraints);

    jLabel3.setText("Dauer");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    pEingabe.add(jLabel3, gridBagConstraints);

    tfErgebnisse.setEditable(false);
    tfErgebnisse.setColumns(8);
    tfErgebnisse.setValue(0);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    pEingabe.add(tfErgebnisse, gridBagConstraints);

    tfDauer.setEditable(false);
    tfDauer.setColumns(8);
    tfDauer.setValue(0);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 4;
    pEingabe.add(tfDauer, gridBagConstraints);

    jLabel4.setText("ms");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 4;
    pEingabe.add(jLabel4, gridBagConstraints);

    spObergrenze.setModel(new javax.swing.SpinnerNumberModel(20, 3, 9999, 10));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    pEingabe.add(spObergrenze, gridBagConstraints);

    pCenter.add(pEingabe, java.awt.BorderLayout.NORTH);

    java.awt.GridBagLayout pButtonLayout = new java.awt.GridBagLayout();
    pButtonLayout.columnWidths = new int[] {0, 5, 0};
    pButtonLayout.rowHeights = new int[] {0, 5, 0, 5, 0};
    pButton.setLayout(pButtonLayout);

    btBerechnen.setText("Berechnen");
    btBerechnen.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onBerechnen(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    pButton.add(btBerechnen, gridBagConstraints);

    btLoeschen.setText("Löschen");
    btLoeschen.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onLoeschen(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    pButton.add(btLoeschen, gridBagConstraints);

    btBeenden.setText("Beenden");
    btBeenden.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        onBeenden(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    pButton.add(btBeenden, gridBagConstraints);

    pCenter.add(pButton, java.awt.BorderLayout.SOUTH);

    pMain.add(pCenter, java.awt.BorderLayout.CENTER);

    pProgress.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));
    pProgress.setLayout(new java.awt.BorderLayout());

    progressBar.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
    pProgress.add(progressBar, java.awt.BorderLayout.CENTER);
    progressBar.getAccessibleContext().setAccessibleParent(pProgress);

    pMain.add(pProgress, java.awt.BorderLayout.SOUTH);

    getContentPane().add(pMain, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  //Innere Klasse
  /*private class PytTripWorker extends SwingWorker<PytTripRechner, Object>
  {

    @Override
    protected PytTripRechner doInBackground() throws Exception
    {
      //TODO
      new PytTripRechner(obergrenze)
    }

    @Override
    protected void done()
    {
      //TODO
    }
  } */
  private void loeschen()
  {
    //Ergebnisse löschen
    listenfeld.setModel(new PytTripListModel(new ArrayList<>()));
    tfDauer.setValue(0);
    tfErgebnisse.setValue(0);
  }
  private void onBerechnen(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onBerechnen
  {//GEN-HEADEREND:event_onBerechnen
    try
    {
    //Eingangsgröße aus der GUI abholen
    final int obergrenze = ((Number)spObergrenze.getValue()).intValue();
    //Ergebnisse löschen
   loeschen();
    // Weiteres berechnen verhindern durch ausgrauen der Schaltfläche
    btBerechnen.setEnabled(false);
    //Fortschrittsanzeige starten
    progressBar.setIndeterminate(true);
    progressBar.setString("Thinking...");
    progressBar.setStringPainted(true);
    
    //Anonyme Klasse
    new SwingWorker<PytTripRechner, Object>()
    {
      @Override
      protected PytTripRechner doInBackground() throws Exception
      {
        return new PytTripRechner(obergrenze);
      }

      @Override
      protected void done()
      {
        try
        {
          final PytTripRechner rechner = get();
          //Ausgabe
          final List<PytTrip> pytTrips = rechner.getPytTrips();
          final PytTripListModel model = new PytTripListModel(pytTrips);
          listenfeld.setModel(model);
          tfErgebnisse.setValue(pytTrips.size());
          tfDauer.setValue(rechner.getRechenzeitInMillis());
        }
        catch (InterruptedException ignore) {  }
        catch (ExecutionException ex)
        {
          JOptionPane.showMessageDialog(PytTripGui.this, ex.getCause().getMessage(),
            "Fehler aufgetreten", JOptionPane.ERROR_MESSAGE);
        }
        finally
        {
          //Schaltflächen wieder "entgrauen"
          btBerechnen.setEnabled(true);
          //Fortschrittsanzeige ausschalten
          progressBar.setIndeterminate(false);
          progressBar.setStringPainted(false);
        }
      }
    }.execute();
    
    //rechnen
    //final PytTripRechner rechner = new PytTripRechner(obergrenze);
    //ausgabe
  /*  final List<PytTrip> pytTrips = rechner.getPytTrips();
    final PytTripListModel model = new PytTripListModel(pytTrips);
    listenfeld.setModel(model);
    tfErgebnisse.setValue(pytTrips.size());
    tfDauer.setValue(rechner.getRechenzeitInMillis());*/
    }
    catch(Exception ex)
    {
      JOptionPane.showMessageDialog(this, ex.getMessage(),
        "Fehler aufgetreten", JOptionPane.ERROR_MESSAGE);
    }
  }//GEN-LAST:event_onBerechnen

  private void onLoeschen(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onLoeschen
  {//GEN-HEADEREND:event_onLoeschen
    loeschen();
  }//GEN-LAST:event_onLoeschen

  private void onX()
  {
    if(JOptionPane.showConfirmDialog(this, 
        String.format("App wirklich beenden"),
        "Sicherheitsabfrage", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
    {
      dispose();
    }
  }
  
  private void onBeenden(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onBeenden
  {//GEN-HEADEREND:event_onBeenden
    onX();
  }//GEN-LAST:event_onBeenden

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(PytTripGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(PytTripGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(PytTripGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(PytTripGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new PytTripGui().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btBeenden;
  private javax.swing.JButton btBerechnen;
  private javax.swing.JButton btLoeschen;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JList<PytTrip> listenfeld;
  private javax.swing.JPanel pButton;
  private javax.swing.JPanel pCenter;
  private javax.swing.JPanel pEingabe;
  private javax.swing.JPanel pList;
  private javax.swing.JPanel pMain;
  private javax.swing.JPanel pProgress;
  private javax.swing.JProgressBar progressBar;
  private javax.swing.JSpinner spObergrenze;
  private javax.swing.JFormattedTextField tfDauer;
  private javax.swing.JFormattedTextField tfErgebnisse;
  // End of variables declaration//GEN-END:variables
}
